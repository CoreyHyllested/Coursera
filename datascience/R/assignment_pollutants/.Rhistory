setwd('data')
length(x)
getwd()
append(x, getwd())
x
x[1]
x[2]
x[2append(vector, values)
append(vector, values)
]
x
y = vector()
y
append(y, getwd())
y
y[1]
y[0]
length(y)
c(y, getwd())
y <- c(y, getwd())
y
source('~/assignment1.R')
DIRECTORIES
getwd()
dir.push('..')
DIRECTORIES
DIRECTORIES[1]
source('~/assignment1.R')
DIRECTORIES[1]
DIRECTORIES
dir.push('data')
DIRECTORIES
DIRECTORIES[1]
ls()
cd(dir())
ls
ls()
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
pm(pollutant='sulfate', id=]1:10)
pm(pollutant='sulfate', id=1:10)
source('~/assignment1.R')
pm(pollutant='sulfate', id=1:10)
pm('data', 'sulfate', 1:10)
getwd()
setwd('..')
pm('data', 'sulfate', 1:10)
pm(pollutant='sulfate', id=1:10)
dir('.')
dir('.', full.names = T)
dir('.', full.names = T)
getwd()
dir('.', full.names = T)
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
dir('.', full.names = T)
getwd()
pm(pollutant='sulfate', id=1:10)
pm(dir='data', pollutant='sulfate', id=1:10)
pm('data', pollutant='sulfate', id=1:10)
pm('data', 'sulfate', 1:10)
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
pm(dir='/data', pollutant='sulfate', id=1:10)
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
dir()
normalizePath(dir())
normalizePath('.')
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
files = list.files(directory, pattern="*.csv", full.names = T)
files = list.files('.', pattern="*.csv", full.names = T)
files
files = list.files('data', pattern="*.csv", full.names = T)
files
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
source('~/assignment1.R')
source('~/assignment1.R')
pm('data', 'sulfate', 1:10)
pm('data', 'sulfate', 1:10)
pwd
pwd()
getwd()
?dir
dir()
pm('sulfate', 1:10)
pm(dir='data', prollutant='sulfate', id=1:10)
pm(dir='data', pollutant='sulfate', id=1:10)
list.files('/opt/Coursera/datascience/R/assignment1/data')
pm(dir='data', pollutant='sulfate', id=1:10)
source('~/assignment1.R')
fqdp              = normalizePath('data')
stations.all      = get_stations_all(fqdp)
stations.sub      = stations.all[1:10]
stations.sub
stations.correlate(stations.sub)
csv001 <- read.csv("/opt/Coursera/datascience/R/assignment1/data/001.csv")
csv.ob = csv001
csv.ob
length(csv.ob)
length(csv.ob[1])
length(csv.ob[[1]])
csv.testing = csv.ob[4]
csv.testing = csv.ob[[4]]
csv.testing
csv.testing = csv.ob[[3]]
csv.complete = csv.ob[complete.cases(csv.ob)]
csv.complete = csv.testing[complete.cases(csv.ob)]
csv.complete
length(csv.complete)
(length(csv.ob) < threshold)
threshold = 150
(length(csv.ob) < threshold)
source('~/assignment1.R')
source('~/assignment1.R')
stations.correlate(stations.sub, 5000)
source('~/assignment1.R')
stations.correlate(stations.sub, 5000)
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
stations.correlate(stations.sub, 5000)
source('~/assignment1.R')
stations.correlate(stations.sub, 5000)
stations.correlate(stations.sub, 1\000)
stations.correlate(stations.sub, 1000)
source('~/assignment1.R')
stations.correlate(stations.sub, 1000)
source('~/assignment1.R')
stations.correlate(stations.sub, 1000)
source('~/assignment1.R')
stations.correlate(stations.sub, 1000)
stations.correlate(stations.sub, 475)
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
source('~/assignment1.R')
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
stations.correlate(stations.sub, 474)
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
source('~/assignment1.R')
stations.correlate(stations.all, 400)
stations.correlate(stations.all, 150)
x <- stations.correlate(stations.all, 150)
x
head(x)
summary(x)
x <- stations.correlate(stations.all, 400)
head(x)
summary
(x)
summary(x)
x <- stations.correlate(stations.all, 5-00)
x <- stations.correlate(stations.all, 5000)
source('~/assignment1.R')
summary(x)
x <- stations.correlate(stations.all, 5000)
summary(x)
length(x)
x <- stations.correlate(stations.all)
summary(x)
length(323)
source('~/assignment1.R')
x <- stations.correlate(stations.all)
length(x)
pm('data', 'sulfate', 1:10)
pm('data', 'nitrate', 70:72)
pm('data', 'sulfate', 34)
pm('data', 'nitrate')
observations('data', c(6, 10, 20, 34, 100, 200, 310))
cc = observations('data', c(6, 10, 20, 34, 100, 200, 310))
cc$nobs
cc = observations('data', 54)
cc$nobs
set.seed(42)
cc <- observations('data', 332:1)
use <- sample(332, 10)
use
print(cc[use, "nobs"])
set.seed(42)
use <- sample(332, 10)
use
cr < corr('data')
cr <- corr('data')
cr <- sort(cr)
cr
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
out
cr <- corr('data', 129)
cr <- sort(cr)
n = length(cr)
n
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print (out)
cr <- corr('data', 2000)
n = length(cr)
cr = corr('data', 1000)
n
n = length(cr)
n
cr <- sort(cr)
print(c(n, round(cr, 4)))
cr = corr('data', 1000)
cr
s = sort(cr)
s
print (c(n, round(s, 4)))
?round
x = list (a = 1:5)
x
lapply(x, mean)
x = list (a = 1:7)
lapply(x, mean)
x = list (a = 1:6)
lapply(x, mean)
x = list (a = 1:6, b = rand(30))
x = list (a = 1:6, b = rand(30))
?Random
x = list (a = 1:6, b = runif(10, 10.0, 100.0))
x
x = list (a = 1:6, b = runif(10, 10.0, 100.0), c=runif(4, -232.2, 8))
x
lapply(x, mean)
z = lapply(x, mean)
z
x = list (1:6, runif(10, 10.0, 100.0), runif(4, -232.2, 8))
x
x = list (a=1:6, runif(10, 10.0, 100.0), runif(4, -232.2, 8))
x
?rnorm
rnorm(10)
rnorm(6, 4)
rnorm(6, 50)
?runif
x = 1:4
x
lapply(x, runif)
y = lapply(x, runif)
y
y[1]
y[2]
y[[2]]
y = lapply(x, runif)
y
y = sapply(x, runif)
y = sapply(x, runif)
y
x = list (a=1:6, runif(10, 10.0, 100.0), runif(4, -232.2, 8))
x
l = lapply(x, mean)
s = sapply(x, mean)
a = apply(x, mean)
l
s
table(s)
m = matrix(runif(6))
m = matrix(runif(6), 3, 3)
m
m = matrix(rnorm(200), 20, 10)
m
m
apply(m, 2, mean)
apply(m, 2:3, mean)
apply(m, c(2,3), mean)
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 3, mean)
apply(m, 0, mean)
apply(l, mean)
apply(l, 1mean)
apply(l, 1, mean)
apply(s, 1, mean)
rowSums(m)
apply(m, 1, sum)
?gl
x = c(rnorm(10, runif(10, rnorm(10, 1))))
x = c(rnorm(10, runif(10, rnorm(10, 1)))
)
x = c(rnorm(10))
x
x = c(rnorm(10), runif(10))
x
x = c(rnorm(10), runif(10), rnorm(10, 1))
x = c(rnorm(10), runif(10), rnorm(10, 1))
x
x
f = gl(3, 10)
f
table(gl(3, 10))
table(gl(3, 10))
f
split(x, f)
x
x
x = c(a=rnorm(10), b=runif(10), c=rnorm(10, 1))
x
lapply(x, mean)
split(x, f)
x = c(rnorm(10), runif(10), rnorm(10, 1))
split(x, f)
lapply(split(x, f), mean)
lapply(split(x, f), mean, SIMPLIFY=T)
sapply(split(x, f), mean)
tapply(split(x, f), mean)
library(datasets)
head(airquality)
split(airquality)
split(airquality, airquality$Month)
lapply(split(airquality, airquality$Month), colMeans(x[,c('Ozone', 'Solar.R')])
)
lapply(split(airquality, airquality$Month), function(x) colMeans(x[, c('Ozone', 'Solar.R')]))
sapply(split(airquality, airquality$Month), function(x) colMeans(x[, c('Ozone', 'Solar.R')]))
sapply(split(airquality, airquality$Month), function(x) colMeans(x[, c('Ozone', 'Solar.R', 'Wind')]))
sapply(split(airquality, airquality$Month), function(x) colMeans(x[, c('Ozone', 'Solar.R', 'Wind'), na.rm=TRUE]))
sapply(split(airquality, airquality$Month), function(x) colMeans(x[, c('Ozone', 'Solar.R', 'Wind')], na.rm=T))
x = rnorm(10)
f1 = gl(2, 5)
f1
f1 = gl(2, 1)
f1
f1 = gl(2, 5)
f2 = gl(5, 2)
f1
f2
interaction(f1, f2)
split(interaction(f1, f2))
x = interaction(f1, f2)
x
str(split(x, list(f1, f2)))
split(x, list(f1, f2))
split(x, list(f1, f2), DROP=TRUE)
split(x, list(f1, f2), drop=T)
library(swril)
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo()
viewinfo(flags)
class(flags)
classes <- lapply(flags, class)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(cls_list)
sapply(flags, class)
cls_vect = sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, colSums)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[,19:23]
range(flag_shapes)
lapply(range, flag_shapes)
lapply(flag_shapes, range)
shape_mat = sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(c(3, 4, 5, 5, 5, 6, 6), unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(flags, unique)
lapply(unique_vals, function(e) e[2])
dim(flags)
str(flags)
summary (flags)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
sapply(iris, mean)
sapply(iris[1:4], mean)
tapply(iris[1:4], mean)
split(iris, iris$Species)
x = split(iris, iris$Species)
x
x[3]
sapply(x, mean)
sapply(x, function (x) colMeans(x[,c('Sepal.Length'')]))
)
)
''
sapply(x, function (x) colMeans(x[,c('Sepal.Length')]))
sapply(x, function (x) colMeans(x[,1]))
sapply(x, mean)
virginica = x[3]
virginica
lapply(virginica, mean)
class(virginica)
lapply(virginica[1], mean)
lapply(virginica[[1]], mean)
rowMeans(iris[,1:4])
apply(iris, 1, mean)
apply(iris[,1:4] 1, mean)
apply(iris[,1:4], 1, mean)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
apply(virginica[, 1:4], 2, mean)
apply(virginica[1:4], 2, mean)
apply(virginica[1:4], 2, mean)
dim(virginica)
virginica
class(virginica)
plen = class(virginica)
plen = virginica[[1]]
plen
plen = virginica[1]
plen
colMeans(iris)
apply(virginica[1:4], 2, mean)
apply(iris[, 1:4], 2, mean)
split(iris, iris$Species)
iris.split = split(iris, iris$Species)
lapply(iris.split, function(x) colMeans(x[, c('Sepal.Length', 'Petal.Length')]))
data(mtcars)
mtcars
head(mtcars)
apply(mtcars, 2, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
split(mtcars, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
debug(ls)
ls()
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
split(mtcars, mtcars$cyl)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
sapply(split(iris$Species), mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
Q
sapply(split(iris$Species), mean)
apply(iris[, 1:4], 2, mean)
iris.split = split(iris, iris$Species)
lapply(iris.split, function(x) colMeans(x[, c('Sepal.Length', 'Petal.Length')]))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
apply(mtcars, 2, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
Q
